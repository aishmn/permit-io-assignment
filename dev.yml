services:
  frontend:
      build:
        context: .
        dockerfile: ./webapp/Dockerfile.dev
      ports:
        - "3000:3000"
      volumes:
        - ./webapp:/app
        - /app/node_modules
      environment:
        - CHOKIDAR_USEPOLLING=true
      stdin_open: true
      tty: true
      networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - PERMIT_API_KEY=${PERMIT_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PERMIT_PDP_URL=${PERMIT_PDP_URL}
    volumes:
      - ./backend/app:/app
    depends_on:
      - db
      - permit-pdp
    networks:
      - app-network

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network

  permit-pdp:
    image: permitio/pdp-v2:latest
    environment:
      - PDP_API_KEY=${PERMIT_API_KEY}
      - PDP_DEBUG=${PERMIT_PDP_DEBUG}
    ports:
      - "7766:7000"
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
